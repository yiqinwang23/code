#sigleton模式
#__new__函数其实调用的比__init__还早，可以理解为new是用来创造实例，而init是初始化实例，
#其中cls代表该类，self表示该实例，通常用new都会返super(Persion, cls).__new__(cls, ... ...)
class singleton(object):
    _instance=None
    def __new__(cls,*args,*kw):
        if not cls._instance:
            _instance=super(singleton,cls).__new__(cls,*args,*kw)
        return cls._instance
#简单工厂模式
#工厂模式包涵一个超类。这个超类提供一个抽象化的接口来创建一个特定类型的对象，而不是决定哪个对象可以被创建。
class Person:
    def __init__(self):
        self.name = None
        self.gender = None

    def getName(self):
        return self.name

    def getGender(self):
        return self.gender

class Male(Person):
    def __init__(self, name):
        print "Hello Mr." + name

class Female(Person):
    def __init__(self, name):
        print "Hello Miss." + name

class Factory:
    def getPerson(self, name, gender):
        if gender == ‘M':
                return Male(name)
            if gender == 'F':
            return Female(name)


if __name__ == '__main__':
    factory = Factory()
    person = factory.getPerson("Chetan", "M")
