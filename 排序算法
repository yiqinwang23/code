#实现快排，快排是不稳定算法，平均情况O（nlogn），最坏是O(n^2)
#快速排序
#指定第一个数为基准数key,key=s[0]，设置两个指针分别指向第1个数和最末尾的数，及i=0，j=len(s) 如 3 51 2 18 6 7 1 15--》则初始基准数为3
#j指针向前移动直到找到第一个<key的数据，并和i交换 1 51 2 18 6 7 3 15
#i指针向后移动直到找到第一个>a的数据，并和j交换 1 3 2 16 6 7 51 15
#j继续向前移动直到i>j 1 2 3 16 6 7 51 15
#递归，此时基准值左边都比基准值小，基准值右边都比基准值大 quicksort(s,0,len(a)-1) quicksort(s,len(a)+1,len(s))

import random
def quick_sort(s,start,end):
    if start<end:
        pivot_index=partition(s,start,end)
        quick_sort(s,start,pivot_index-1)
        quick_sort(s,pivot_index+1,end)
    return s
def partition(s,start,end):
    key=s[start]
    i=start
    j=len(s)-1
    while i<j:
        while (i<j) and (s[j]>key):
            j=j-1
        s[i],s[j]=s[j],s[i]
        while (i<j) and (s[i]<key):
            i=i+1
        s[j],s[i]=s[i],s[j]
    s[i]=key
    return i

s=[]
for i in range(10):
    s.append(random.randint(1,100))
print (s)
s1=quick_sort(s,0,len(s)-1)
print (s1)
